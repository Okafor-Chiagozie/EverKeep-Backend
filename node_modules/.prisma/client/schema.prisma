// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  email      String    @unique
  password   String
  fullName   String?
  phone      String?
  isVerified Boolean   @default(false)
  lastLogin  DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?

  // Relations
  contacts      Contact[]
  vaults        Vault[]
  notifications Notification[]

  @@map("users")
}

model Contact {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  userId       String    @db.ObjectId
  email        String
  fullName     String
  phone        String?
  relationship String?
  isVerified   Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  // Relations
  user            User             @relation(fields: [userId], references: [id])
  vaultRecipients VaultRecipient[]

  @@unique([userId, email])
  @@map("contacts")
}

model Vault {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  userId         String    @db.ObjectId
  name           String
  description    String?
  isActive       Boolean   @default(true)
  deadmanTrigger Int?
  encryptionKey  String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?

  // Relations
  user       User             @relation(fields: [userId], references: [id])
  entries    VaultEntry[]
  recipients VaultRecipient[]

  @@map("vaults")
}

model VaultEntry {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  vaultId   String    @db.ObjectId
  parentId  String?   @db.ObjectId
  type      String // 'text', 'image', 'video', 'audio', 'document'
  content   String
  timestamp DateTime  @default(now())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  vault    Vault        @relation(fields: [vaultId], references: [id])
  parent   VaultEntry?  @relation("EntryHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children VaultEntry[] @relation("EntryHierarchy")

  @@map("vault_entries")
}

model VaultRecipient {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  vaultId   String    @db.ObjectId
  contactId String    @db.ObjectId
  role      String    @default("recipient") // 'owner', 'recipient', 'viewer'
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  vault   Vault   @relation(fields: [vaultId], references: [id])
  contact Contact @relation(fields: [contactId], references: [id])

  @@unique([vaultId, contactId])
  @@map("vault_recipients")
}

model Notification {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String    @db.ObjectId
  type      String // 'email', 'push', 'sms'
  title     String
  message   String
  isRead    Boolean   @default(false)
  metadata  Json?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("notifications")
}
