generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                      String    @id @default(auto()) @map("_id") @db.ObjectId
  email                   String    @unique
  password                String
  phone                   String    @unique
  fullName                String
  isVerified              Boolean   @default(false)
  lastLogin               DateTime  @default(now())
  inactivityThresholdDays Int       @default(60)
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  deletedAt               DateTime?

  contacts                Contact[]
  vaults                  Vault[]
  notifications           Notification[]
  emailVerificationTokens EmailVerificationToken[]
  passwordResetTokens     PasswordResetToken[]
}

model Contact {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String    @db.ObjectId
  name      String
  email     String
  phone     String?
  role      String?
  verified  Boolean   @default(false)
  timestamp DateTime  @default(now())
  deletedAt DateTime?

  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipients VaultRecipient[]

  @@unique([userId, email])
}

model Notification {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String    @db.ObjectId
  title     String?
  content   String?
  timestamp DateTime  @default(now())
  deletedAt DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Vault {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  userId          String    @db.ObjectId
  name            String
  description     String?
  deliveredAtDate DateTime?
  timestamp       DateTime  @default(now())
  deletedAt       DateTime?

  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  entries    VaultEntry[]
  recipients VaultRecipient[]
}

model VaultEntry {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  vaultId   String    @db.ObjectId
  type      String
  content   String
  timestamp DateTime  @default(now())
  deletedAt DateTime?

  // Parent-child relation to link attachments to a message
  parentId    String?      @db.ObjectId
  parent      VaultEntry?  @relation("ParentEntry", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  attachments VaultEntry[] @relation("ParentEntry")

  vault Vault @relation(fields: [vaultId], references: [id], onDelete: Cascade)
}

model VaultRecipient {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  vaultId   String    @db.ObjectId
  contactId String    @db.ObjectId
  timestamp DateTime  @default(now())
  deletedAt DateTime?

  vault   Vault   @relation(fields: [vaultId], references: [id], onDelete: Cascade)
  contact Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)
}

model EmailVerificationToken {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String    @db.ObjectId
  token     String    @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String    @db.ObjectId
  token     String    @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
