// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  fullName  String?
  phone     String?
  password  String
  isVerified Boolean @default(false)
  isDeleted Boolean  @default(false)
  lastLogin DateTime?
  inactivityThresholdDays Int @default(30)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  contacts      Contact[]
  vaults       Vault[]
  notifications Notification[]

  @@map("users")
}

model Contact {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  fullName  String
  email     String
  phone     String?
  relationship String?
  isVerified Boolean @default(false)
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user           User            @relation(fields: [userId], references: [id])
  vaultRecipients VaultRecipient[]

  @@unique([userId, email])
  @@map("contacts")
}

model Vault {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  name      String
  description String?
  isActive  Boolean  @default(true)
  deadmanTrigger DateTime?
  encryptionKey String?
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user           User            @relation(fields: [userId], references: [id])
  entries        VaultEntry[]
  recipients     VaultRecipient[]

  @@map("vaults")
}

model VaultEntry {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  vaultId   String   @db.ObjectId
  type      String   // 'text', 'image', 'video', 'audio', 'document'
  content   String
  parentId  String?  @db.ObjectId
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  vault       Vault         @relation(fields: [vaultId], references: [id])
  parent      VaultEntry?   @relation("EntryHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children    VaultEntry[]  @relation("EntryHierarchy")

  @@map("vault_entries")
}

model VaultRecipient {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  vaultId   String   @db.ObjectId
  contactId String   @db.ObjectId
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  vault   Vault   @relation(fields: [vaultId], references: [id])
  contact Contact @relation(fields: [contactId], references: [id])

  @@map("vault_recipients")
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  type      String   // 'email', 'system', 'vault', etc.
  title     String
  message   String
  isRead    Boolean  @default(false)
  metadata  Json?
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("notifications")
}
